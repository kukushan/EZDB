//
//  redeemPasswordViewController.m
//  EZDB
//
//  Created by luoyao on 14/11/17.
//  Copyright (c) 2014年 Pactera. All rights reserved.
//

#import "redeemPasswordViewController.h"
#import "redeemSuccessController.h"
#import "ChangePwdViewController.h"
#import "RedeemRequest.h"
#import "RedeemResultRequestr.h"
#import "GetServerRandomRequest.h"
#import "RedeemResultModel.h"
#include "Base64Transcoder.h"

@interface redeemPasswordViewController ()<AfterSipDelegator>

@end

@implementation redeemPasswordViewController

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}
-(void)dealloc
{
    
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    [self setNavBarWithtitle:@"赎回" superView:self.view backImg:kNavBackImgName homeImg:nil];
    [self.view setBackgroundColor:kViewBackGroudColor];
//    test
    self.passwordTF.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    self.passwordTF.secureTextEntry = YES;
    self.passwordTF.clearButtonMode = UITextFieldViewModeWhileEditing;
    self.passwordTF.returnKeyType = UIReturnKeyDone;
    self.passwordTF.backgroundColor = [UIColor clearColor];
    self.passwordTF.clearsOnBeginEditing = YES;
    self.passwordTF.font = [UIFont systemFontOfSize:14];
    self.passwordTF.borderStyle = UITextBorderStyleNone;
    self.passwordTF.randomeKey_S = @"MDAwMDAwMDAwMDAwMDk4Nw==";
    self.passwordTF.passwordMaxLength=20;
    self.passwordTF.passwordMinLength=6;
    self.passwordTF.outputValueType=2;
    self.passwordTF.passwordRegularExpression = @"[a-zA-Z0-9!@#$%^&#$%^&amp;#$%^&#$%^&amp;amp;*_]*";
    self.passwordTF.delegate = self;
    self.passwordTF.sipdelegate = self;
    
    
}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
}
#pragma mark - 确定支付 事件
- (IBAction)submitAction:(id)sender {
    //    确定  支付点击事件
    //    发送赎回请求 若返回成功则跳转赎回成功界面
    
    [self.passwordTF resignFirstResponder];
    if (self.passwordTF.text.length==0) {
        [MSUtil showHudMessage:@"支付密码不能为空" hideAfterDelay:1.5 uiview:self.view];
    }else if(self.passwordTF.text.length<6||self.passwordTF.text.length>20){
        [MSUtil showHudMessage:@"支付密码长度不符合" hideAfterDelay:1.5 uiview:self.view];
    }else{
        [self getServerRadom];
    }
    //
    //    GOTO_NEXTVIEWCONTROLLER(redeemSuccessController, @"redeemSuccessController", @"redeemSuccessController");
    
}
#pragma mark - 忘记密码
- (IBAction)forgetPasswordAction:(id)sender {
    //    忘记密码
    GOTO_NEXTVIEWCONTROLLER(ChangePwdViewController, @"ChangePwdViewController", @"ChangePwdViewController");
}


#pragma mark - delegate method  赎回请求
#ifdef FORPRODUCT
- (void)actionAfterSip:(int)resultType
        passwordResult:(NSString *)passwordResult
         randomCResult:(NSString *)randomCResult
             errorCode:(NSString *)errorCode
          errorMessage:(NSString *)errorMessage
                object:(CFCASip *)sip
#else
- (void)actionAfterSip:(int)resultType
        passwordResult:(NSString *)passwordResult
         randomCResult:(NSString *)randomCResult
             errorCode:(NSString *)errorCode
          errorMessage:(NSString *)errorMessage
{
    if (resultType==0) {
        if (errorCode) {
            [MBProgressHUD hideAllHUDsForView:self.view animated:YES];
            NSDictionary *errorInfo = @{@"error_code":errorMessage,@"error_description":errorMessage};
            UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"温馨提示"  message:errorInfo[@"error_description"] delegate:self cancelButtonTitle:@"确定" otherButtonTitles:nil, nil];
            [alert show];
            
        }else{
            self.pdResultRedeem = passwordResult;
            self.randomResultRedeem = randomCResult;
            NSDictionary *data = @{@"OldPass":self.pdResultRedeem,
                                   @"OldPass_RC":self.randomResultRedeem,
                                   @"rs":self.serverRandNumRedeem};
            
            NSDictionary *passwordDTO = @{@"data":data};
            
            //            NSDictionary *params = @{@"custNo":[UserInfoSample shareInstance].userItems[@"uid"],
            //                                     @"passwordDTO":passwordDTO,};
            //            test
            NSDictionary * params=@{@"userId":[BOCOPLogin sharedInstance].userName,
                                    @"cardSeq":@"",
                                    @"fundCode":@"",
                                    @"redeemType":_redeemTypeStr,
                                    @"redeemShare":_redeemShare,
                                    @"PasswordDTO":passwordDTO,
                                    };
            BOCOPPayAuthorizeInfo *authorizeInfo = [BOCOPLogin sharedInstance].authInfo;
            RedeemRequest *request = [RedeemRequest requestWithHeaders:nil];
            
            NSMutableDictionary *headParameters = [NSMutableDictionary dictionaryWithDictionary:[request getBusinessRequestHeaderDictionary:authorizeInfo]];
            
            request.headers = headParameters;
            request.postJSON = [params JSONString];
            [request onRequestDidFinishLoadingWithResult:^(NSDictionary *result) {
                LOG(@"serviceResponse %@",result);
                if ([result[@"responseCode"]isEqualToString:_responseCode_PayPwd_Done]) {
                    [MBProgressHUD hideAllHUDsForView:self.view animated:YES];
                    //支付密码验证成功
                    GOTO_NEXTVIEWCONTROLLER(redeemSuccessController, @"redeemSuccessController", @"redeemSuccessController");
                }else if ([result[@"msgcde"]isEqualToString:@"ASR-000003"]||
                          [result[@"msgcde"]isEqualToString:@"ASR-000005"]||
                          [result[@"msgcde"]isEqualToString:@"invalid_token"]) {
                    [MBProgressHUD hideAllHUDsForView:self.view animated:YES];
                    [BOCOPLogin sharedInstance].isLogin = NO;
                    NSMutableArray *arr = [NSMutableArray arrayWithObjects:@"确定", nil];
                    [self showNBAlertWithAletTag:111 Title:@"温馨提醒" content:result[@"rtnmsg"] btnArray:arr];
                }else{
                    [MBProgressHUD hideAllHUDsForView:self.view animated:YES];
                    NSMutableArray *arr = [NSMutableArray arrayWithObjects:@"确定", nil];
                    [self showNBAlertWithAletTag:110 Title:@"温馨提醒" content:result[@"responseMsg"] btnArray:arr];
                }
            }];
            
            [request onRequestFailWithError:^(NSError *error) {
                [MBProgressHUD hideAllHUDsForView:self.view animated:YES];
                __Login_Invailid_;
            }];
            [request connect];
        }
    }
}
#endif

#pragma mark - 查询赎回结果
-(void)getRedeemResultRequest
{
    BOCOPPayAuthorizeInfo *authorizeInfo = [BOCOPLogin sharedInstance].authInfo;
    RedeemResultRequestr   *request = [RedeemResultRequestr requestWithHeaders:nil];
    NSMutableDictionary   *headers = [NSMutableDictionary dictionaryWithDictionary:[request getBusinessRequestHeaderDictionary:authorizeInfo]];
//    NSDictionary *bodyParameters = @{@"orderNo":@"赎回申请返回的主站订单号"};
    NSDictionary *bodyParameters = @{@"orderNo":@"R20141101123423111"};

    [request setHeaders:headers];    //报文头
    [request setPostJSON:[bodyParameters JSONString]];    //报文体
    [request onRequestDidFinishLoadingWithResult:^(NSDictionary *result) {
        if (result) {
            dispatch_async(dispatch_get_main_queue(), ^{
                RedeemResultModel * redeemResultModel=[[RedeemResultModel alloc]initWithDataDic:result];
                
                
                
            });
        }
    }];
    [request onRequestFailWithError:^(NSError *error) {
        __Login_Invailid_;
    }];
    [request connect];
}

#pragma mark - 获取服务端随机数
- (void)getServerRadom
{
    BOCOPPayAuthorizeInfo *authorizeInfo = [BOCOPLogin sharedInstance].authInfo;
    GetServerRandomRequest *request = [GetServerRandomRequest requestWithHeaders:nil];
    NSMutableDictionary *headers = [NSMutableDictionary dictionaryWithDictionary:[request getBusinessRequestHeaderDictionary:authorizeInfo]];
    NSDictionary *params =@{@"AppName":@"ezdb"};
    request.headers = headers;
    request.postJSON = [params JSONString];
    [request onRequestDidFinishLoadingWithResult:^(NSDictionary *result) {
        self.serverRandNumRedeem = result[@"serverRandom"];
        LOG(@"__serverRandNum %@",self.serverRandNumRedeem);
        dispatch_async(dispatch_get_main_queue(), ^{
            NSString *base64RandomCode = [self getBase64RandomCode:self.serverRandNumRedeem];
            self.passwordTF.sipdelegate = self;
            self.passwordTF.randomeKey_S = base64RandomCode;
            [self.passwordTF getValue];
            
        });
    }];
    [request onRequestFailWithError:^(NSError *error) {
        __Login_Invailid_;
    }];
    
    [request connect];
    
}

- (NSString *)getBase64RandomCode:(NSString*)randomCode
{
    int length = [randomCode lengthOfBytesUsingEncoding:NSUTF8StringEncoding];
    char inputData[length];
    
    [[randomCode dataUsingEncoding:NSUTF8StringEncoding] getBytes:inputData length:length];
    size_t inputDataSize = (size_t)[randomCode length];
    size_t outputDataSize = EstimateBas64EncodedDataSize(inputDataSize);//calculate the decoded data size
    char outputData[outputDataSize];//prepare a Byte[] for the decoded data
    Base64EncodeData(inputData, inputDataSize, outputData, &outputDataSize);//decode the data
    NSData *theData = [[NSData alloc] initWithBytes:outputData length:outputDataSize];//create a NSData object from the decoded data
    NSString *base64EncodedResult = [[NSString alloc] initWithData:theData encoding:NSUTF8StringEncoding];
    
	return base64EncodedResult;
}//


#pragma mark - NBAlertViewDelegate
- (void)NBAlertViewDialogButtonTouchUpInside:(id)alertView clickedButtonAtIndex:(NSInteger)buttonIndex
{
    [alertView close];
    //    if ([alertView tag]==111) {
    //        GOTO_NEXTVIEWCONTROLLER(LoginViewController,
    //                                @"LoginViewController",
    //                                @"LoginViewController4");
    //    }
}
- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event
{
    [self.view endEditing:YES];
}
@end
